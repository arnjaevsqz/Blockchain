# Solidity Smart Contract: ATM System

This Solidity smart contract implements a basic ATM system with deposit, withdrawal, and burn functionalities. It provides a secure and transparent way to manage funds on a blockchain.

## Description

This Solidity smart contract simulates a basic ATM system. It allows the contract owner to deposit, withdraw, and burn funds securely. The contract tracks the balance, emits events for transactions, and includes error handling to prevent invalid operations. The accompanying React frontend provides a user interface for interacting with the contract, allowing users to connect their MetaMask wallets, view their balances, and perform transactions.

## Getting Started

### Executing program

* To run this program, you can use Remix, an online Solidity IDE. To get started, go to the Remix website at https://remix.ethereum.org/.
* Once you are on the Remix website, create a new file by clicking on the "+" icon in the left-hand sidebar. Save the file with a .sol extension (e.g., HelloWorld.sol). Copy and paste the following code into the file:

```solidity
    // SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract Assessment {
    address payable public owner;
    uint256 public balance;

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);

    constructor(uint256 initBalance) payable {
        owner = payable(msg.sender);
        balance = initBalance;
    }

    function getBalance() public view returns (uint256) {
        return balance;
    }

    function deposit(uint256 _amount) public payable {
        require(msg.sender == owner, "You are not the owner of this account");
        require(_amount > 0, "Deposit amount must be greater than 0");
        uint256 _previousBalance = balance;

        // Perform transaction
        balance += _amount;

        // Emit the event
        emit Deposit(msg.sender, _amount);

        assert(balance == _previousBalance + _amount);
    }

    function withdraw(uint256 _amount) public {
        require(msg.sender == owner, "You are not the owner of this account");
        require(_amount > 0, "Withdrawal amount must be greater than 0");
        require(balance >= _amount, "Insufficient balance");

        uint256 _previousBalance = balance;

        // Withdraw the given amount
        balance -= _amount;

        // Emit the event
        emit Withdraw(msg.sender, _amount);

        assert(balance == _previousBalance - _amount);
    }

    function burn(uint256 _amount) public {
        require(balance >= _amount, "Insufficient balance");
        uint256 _previousBalance = balance;
        balance -= _amount;
        emit Withdraw(msg.sender, _amount);
        assert(balance == _previousBalance - _amount);
    }
}
```

```javascript
import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }

    if (ethWallet) {
      const accounts = await ethWallet.request({ method: "eth_accounts" });
      handleAccount(accounts);
    }
  };

  const handleAccount = (account) => {
    if (account) {
      console.log("Account connected: ", account);
      setAccount(account);
    } else {
      console.log("No account found");
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
    handleAccount(accounts);

    // once the wallet is set we can get a reference to our deployed contract
    getATMContract();
  };

  const getATMContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  const getBalance = async () => {
    if (atm) {
      setBalance((await atm.getBalance()).toNumber());
    }
  };

  const deposit = async () => {
    if (atm) {
      let tx = await atm.deposit(1);
      await tx.wait();
      getBalance();
    }
  };

  const withdraw = async () => {
    if (atm) {
      let tx = await atm.withdraw(1);
      await tx.wait();
      getBalance();
    }
  };

  const burn = async () => {
    if (atm) {
      let tx = await atm.burn(1);
      await tx.wait();
      getBalance();
    }
  };

  const initUser = () => {
    // Check to see if the user has Metamask
    if (!ethWallet) {
      return <p>Please install Metamask to use this ATM.</p>;
    }

    // Check to see if the user is connected. If not, connect to their account
    if (!account) {
      return (
        <button onClick={connectAccount}>Please connect your Metamask wallet</button>
      );
    }

    if (balance === undefined) {
      getBalance();
    }

    return (
      <div className="user-container">
        <p>Your Account: {account}</p>
        <p>Your Balance: {balance}</p>
        <button onClick={deposit}>Deposit 1 ETH</button>
        <button onClick={withdraw}>Withdraw 1 ETH</button>
        <button onClick={burn}>Burn 1 ETH</button>
      </div>
    );
  };

  useEffect(() => {
    getWallet();
  }, []);

  return (
    <main className="page-container">
      <header>
        <h1>Welcome to Metacrafters ATM!</h1>
      </header>
      <div className="box">
        {initUser()}
      </div>
      <style jsx>{`
        .page-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100vh;
        }

        .box {
          padding: 20px;
          margin-top: 20px;
          border: 2px solid red;
          border-radius: 10px;
        }

        .user-container {
          text-align: center;
        }
      `}</style>
    </main>
  );
}

```
To compile the code, click on the "Solidity Compiler" tab in the left-hand sidebar. Make sure the "Compiler" option is set to "0.8.0" (or another compatible version), and then click on the "Compile burat.sol" button.

Once the code is compiled, you can deploy the contract by clicking on the "Deploy & Run Transactions" tab in the left-hand sidebar. Sand then click on the "Deploy" button.

Once the contract is deployed, you can interact with it using the functions. click on the "transact" buttons to create transactions

## Authors
Aaron Vasquez

aaronjvsqz@gmail.com

License
This project is licensed under the MIT License - see the LICENSE.md file for details
